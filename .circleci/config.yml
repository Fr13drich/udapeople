version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            bash revertMigrations.sh
            
orbs:
  aws-cli: circleci/aws-cli@4.0.0            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            # bad idea npm update
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test frontend
          command: |
            ls -la
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: test backend
          command: |
            ls -la
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: cimg/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
  deploy-infrastructure:
    docker:
      # - image: python:3.7-alpine3.11
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip
      # - run:
      #    name: Install Ansible
      #    command: |
      #      yum -y install ansible
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd

            echo [all] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
              --output text >> .circleci/ansible/inventory.txt
            ls -la .circleci/ansible/inventory.txt
            cat  .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["de:78:68:62:bd:01:7b:28:8e:6f:56:35:4a:c6:72:e7"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install awscli
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Configure server
          command: |
            chmod 774 ~/project/.circleci/ansible/inventory.txt
            ls -la ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook --ssh-extra-args='-q' -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
  run-migrations:
    docker:
      - image: cimg/node:14.18.1
    executor: aws-cli/default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - aws-cli/setup:
         profile_name: default
      - run:
          name: Run migrations
          command: |
              cd backend
              echo ENVIRONMENT=production > .env
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
              echo TYPEORM_HOST=$TYPEORM_HOST >> .env
              echo TYPEORM_PORT=$TYPEORM_PORT >> .env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
              npm install
              npm run build
              ## Run and save the migration output
              npm run migrations > migrations_dump.txt
              pwd
              cat .env
              cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." /home/circleci/project/backend/migrations_dump.txt
              then
                curl https://kvdb.io/BiNXxK1ux3UTi4YAqLVXmQ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                echo "migration_${CIRCLE_WORKFLOW_ID:0:7} set to  1"
              else
                curl https://kvdb.io/BiNXxK1ux3UTi4YAqLVXmQ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
                echo "migration_${CIRCLE_WORKFLOW_ID:0:7} set to  0"
              fi
      - revert-migrations
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: default
      - run:
          name: Install curl
          command: |
            apk add --update curl bash
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Install python
          command: |
            apk add --update python3
      - run:
          name: Install npm
          command: |
            apk add --update npm
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
              --output text`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            # aws s3 cp dist s3://udapeople928015429973 --recursive
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: default
      - add_ssh_keys:
          fingerprints: ["de:78:68:62:bd:01:7b:28:8e:6f:56:35:4a:c6:72:e7"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update curl bash
      - run:
          name: Install npm
          command: |
            apk add --update npm
      - run:
          name: build and zip
          command: |
            cd backend
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls -la  ~/project/
      - persist_to_workspace:
          root: ~/project/
          paths: artifact.tar.gz
      - run:
          name: Deploy backend
          command: |
            chmod 774 ~/project/.circleci/ansible/inventory.txt
            ls -la ~/project/.circleci/ansible/inventory.txt
            echo "Contents  of the inventory.txt file is -------"
            cat  .circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i  ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-tests:
    docker:
      - image: python:3.11-rc-alpine
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: default
      - add_ssh_keys:
          fingerprints: ["de:78:68:62:bd:01:7b:28:8e:6f:56:35:4a:c6:72:e7"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install curl
          command: |
            apk add --update curl bash
      # - run:
      #     name: Install awscli
      #     command: |
      #       apk add --no-cache \
      #       python3 \
      #       py3-pip \
      #       && pip3 install --upgrade pip \
      #       && pip3 install --no-cache-dir \
      #       awscli \
      #       && rm -rf /var/cache/apk/*
      - run:
          name: Test backend
          command: |
            BACKEND_IP=$(tail -n 1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
            	return 0
            else
            	return 1
            fi
      - run:
          name: Test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
      
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip    
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/OldWorkflowID.txt
     
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
           
            echo OldWorkflowID: `cat ~/OldWorkflowID.txt`
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
      - persist_to_workspace:
          root: ~/
          paths: 
            - OldWorkflowID.txt
            
  cleanup:
    docker:
      - image: amazon/aws-cli   
    steps:
       - checkout 
       - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip  
       - attach_workspace:
          at: ~/
      # - run:
      #     name: Find old workflow id
      #     command: |
      #       export OldWorkflowID=$(aws cloudformation \
      #                 list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
      #                   --no-paginate --output text)
      #       echo OldWorkflowID: "${OldWorkflowID}"
      #       echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
      #       ## Fetch the stack names          
      #       export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
      #                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      #       echo Stack names: "${STACKS[@]}"   
       - run:
           name: delete s3 + stacks
           command: |
             pwd
             OldWorkflowID=`cat /root/OldWorkflowID.txt`
             echo "OldWorkflowID=$OldWorkflowID"
             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "$OldWorkflowID" ]]
             then
               echo "will delete old version"
               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive              
               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
             else
               echo "cleanup not required"
             fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
           requires:
            - deploy-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-tests:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-tests]
      - cleanup:
          requires: [cloudfront-update]